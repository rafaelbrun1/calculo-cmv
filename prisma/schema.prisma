// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Restaurant    Restaurant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id                      String                    @id @default(cuid())
  name                    String
  address                 String?
  cnpj                    String?
  userId                  String
  Inputs                  Inputs[]
  user                    User                      @relation(fields: [userId], references: [id])
  Products                FinalProducts[]
  ProcesedProducts        ProcesedProducts[]
  ProcessedProductsInputs ProcessedProductsInputs[]
  ProductsInputs          ProductsInputs[]

  @@map("restaurant")
}

model Inputs {
  id                      String                    @id @default(cuid())
  cod                     String?
  und                     String
  cost_in_cents           Int
  name                    String
  restaurantId            String
  ProductsInputs          ProductsInputs[]
  restaurant              Restaurant                @relation(fields: [restaurantId], references: [id])
  ProcessedProductsInputs ProcessedProductsInputs[]

  @@map("inputs")
}

model FinalProducts {
  id                  String           @id @default(cuid())
  name                String
  sell_price_in_cents Int
  restaurantId        String
  restaurant          Restaurant       @relation(fields: [restaurantId], references: [id])
  ProductsInputs      ProductsInputs[]

  @@map("products")
}

model ProcesedProducts {
  id                       String                    @id @default(cuid())
  name                     String
  sell_price_in_cents      Int
  restaurantId             String
  restaurant               Restaurant                @relation(fields: [restaurantId], references: [id])
  ProcessedProductsInputs  ProcessedProductsInputs[] @relation("refer_to_final_processed_product")
  ProductsInputs           ProductsInputs[]
  processedProductsAsInput ProcessedProductsInputs[] @relation("refer_to_processed_products_as_input")

  @@map("processed_inputs")
}

model ProcessedProductsInputs {
  id                         String            @id @default(cuid())
  quantity                   Int
  procesedProductsId         String
  processedProductsIdAsInput String?
  inputsId                   String?
  restaurantId               String
  restaurant                 Restaurant        @relation(fields: [restaurantId], references: [id])
  processedProducts          ProcesedProducts  @relation("refer_to_final_processed_product", fields: [procesedProductsId], references: [id])
  inputs                     Inputs?           @relation(fields: [inputsId], references: [id])
  processedProductsAsInput   ProcesedProducts? @relation("refer_to_processed_products_as_input", fields: [processedProductsIdAsInput], references: [id])

  @@map("processed_products_inputs")
}

model ProductsInputs {
  id                 String            @id @default(cuid())
  quantity           Int
  final_productsId   String
  inputsId           String?
  procesedProductsId String?
  restaurantId       String
  restaurant         Restaurant        @relation(fields: [restaurantId], references: [id])
  processedProducts  ProcesedProducts? @relation(fields: [procesedProductsId], references: [id])
  product            FinalProducts     @relation(fields: [final_productsId], references: [id])
  input              Inputs?           @relation(fields: [inputsId], references: [id])

  @@map("products_inputs")
}
